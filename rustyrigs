#!/usr/bin/perl
# rustyrigs.pl: GTK rigctld frontend for the system tray
# You need to run rigctld with -o such as in ./run-dummy-rigctld
use strict;
use warnings;
use Hamlib;
use Scalar::Util qw(looks_like_number);
use Sys::Hostname;
use Data::Dumper;
use Data::Structure::Util qw/unbless/;
use YAML::XS;
use POSIX       qw(strftime);
use Time::HiRes qw(gettimeofday tv_interval usleep);
use Gtk3 '-init';
use Glib qw(TRUE FALSE);
use FindBin;

# project settings
our $app_name         = 'rustyrigs';
our $app_descr        = "GTK frontend for rigctld";
our $default_cfg_file = $ENV{"HOME"} . "/.config/${app_name}.yaml";
our $cfg_file         = $default_cfg_file;
our $log_file         = $ENV{"HOME"} . "/${app_name}.log";

# Prefer libraries from the source tree, if we are there, over system-wide
use lib (-f 'lib/woodpile.pm') ? "$FindBin::Bin/lib" : '/usr/lib/rustyrigs';

use woodpile;			# misc. scraps we dug out of the woodpile
use RustyRigs::Defconfig;	# default configuration settings
#use RustyRigs::curses_ui;	# someday we'll have a cli interface here
use RustyRigs::GTK_ui;		# GTK3 user interface
use RustyRigs::Cmdline;		# command line parsing
use RustyRigs::Doc;		# help messages
use RustyRigs::Hamlib;		# hamlib rig control
use RustyRigs::Amp;		# hamlib amplifier control
use RustyRigs::Rotator;		# hamlib rotator control
use RustyRigs::Settings;		# settings editor window (includes color choser)
use RustyRigs::FM;		# FM settings sub-box for main window
use RustyRigs::Memory;		# channel memory management
use RustyRigs::Meter;		# meter bars and window
use RustyRigs::Logview;		# log viewer window
use RustyRigs::Gridtools;

# Start logging in debug mode until config is loaded and we quiet down...
our $log = woodpile::Log->new( $log_file, "debug" );

##################
# Run time state #
##################
our $cfg_readonly = FALSE;
our $connected    = FALSE;
our $locked       = FALSE;
our $vfos         = $RustyRigs::Hamlib::vfos;
our $hamlib_riginfo;
our $amp;
our $amp_p;
our $rig;
our $rig_p;
our $rot;
our $rot_p;
our $channels;
our $gtk_ui;
our $logview;
our $mem_file;
our $gridtools;

#####################################################
# Set config to defconfig, until we load config...
our $def_cfg = $RustyRigs::Defconfig::def_cfg;
our $cfg     = $def_cfg;
our $cfg_p;

# Set up logging...
$log->Log( "core", "info", "$app_name  is starting" );

sub restart {
  print "restarting!\n";
  exec $^X, $0, @ARGV;
}

sub toggle_locked {
    my ( $origin, $lv ) = @_;

    if ( defined $lv ) {
        $locked = $lv;
    } else
    {
        if ( $locked == TRUE ) {
            $locked = FALSE;
        }
        else {
            $locked = TRUE;
        }
    }

    if (!($origin eq "button")) {
        my $lb = $gtk_ui->{'lock_button'};
        $$lb->set_active($locked);
    }

    my @widgets = (
       $gtk_ui->{'mem_load_button'},
       $gtk_ui->{'mode_entry'},
       $gtk_ui->{'rf_gain_entry'},
       $gtk_ui->{'rig_vol_entry'},
       $gtk_ui->{'vfo_freq_entry'},
       $gtk_ui->{'vfo_power_entry'},
       $gtk_ui->{'vfo_sel_button'},
       $gtk_ui->{'width_entry'}
    );

    if ($locked) {
        foreach my $widget (@widgets) {
            my $actual_widget = $$widget;
            if ($actual_widget->isa('Gtk3::Entry')) {
                $actual_widget->set_editable(0);
            } else
            {
                $actual_widget->set_sensitive(0);
            }
        }
    } else
    {
        foreach my $widget (@widgets) {
            my $actual_widget = $$widget;
            if ($actual_widget->isa('Gtk3::Entry')) {
                $actual_widget->set_editable(1);
            } else
            {
                $actual_widget->set_sensitive(1);
            }
        }
    }
#    $log->Log( "ui", "debug", "Toggling \$locked to $locked by $origin" );
}

sub save_config {
    $cfg_p->save($cfg_file);
}

# Parse the command line
RustyRigs::Cmdline::parse( \$cfg, \$cfg_file );

# Load configuration
$cfg_p = woodpile::Config->new( \$log, \$cfg_file, \$def_cfg );
$cfg   = \$cfg_p->{cfg};

if ($cfg_readonly) {
    $log->Log( "core", "info", "using configuration read-only" );
    $cfg->{'read_only'} = 1;
}

# XXX: Some of these should be configurable such as max wattage (ideally read from rigctl)
# XXX: and voltages
our $meters = {
   'alc' => {
      'title' => 'ALC',
      'enabled' => TRUE,
      'alarm_bg' => $$cfg->{'ui_alc_alarm_bg'},
      'bg' => $$cfg->{'ui_alc_bg'},
      'fg' => $$cfg->{'ui_alc_fg'},
      'font' => $$cfg->{'ui_alc_font'},
      'text' => $$cfg->{'ui_alc_text'},
      'range_min' => 0,
      'range_max' => 25,
      'thresh_min' => $$cfg->{'thresh_alc_min'},
      'thresh_max' => $$cfg->{'thresh_alc_max'}
   },
   'comp' => {
      'title' => 'Comp',
      'enabled' => TRUE,
      'alarm_bg' => $$cfg->{'ui_comp_alarm_bg'},
      'bg' => $$cfg->{'ui_comp_bg'},
      'fg' => $$cfg->{'ui_comp_fg'},
      'font' => $$cfg->{'ui_comp_font'},
      'text' => $$cfg->{'ui_comp_text'},
      'range_min' => 0,
      'range_max' => 25,
      'thresh_min' => $$cfg->{'thresh_comp_min'},
      'thresh_max' => $$cfg->{'thresh_comp_max'}
   },
   'power' => {
      'title' => 'PWR',
      'enabled' => TRUE,
      'alarm_bg' => $$cfg->{'ui_power_alarm_bg'},
      'bg' => $$cfg->{'ui_power_bg'},
      'fg' => $$cfg->{'ui_power_fg'},
      'font' => $$cfg->{'ui_power_font'},
      'text' => $$cfg->{'ui_power_text'},
      'range_min' => 0,
      'range_max' => 100,
      'thresh_min' => $$cfg->{'thresh_power_min'},
      'thresh_max' => $$cfg->{'thresh_power_max'}
   },
   'swr' => {
      'title' => 'SWR',
      'enabled' => TRUE,
      'alarm_bg' => $$cfg->{'ui_swr_alarm_bg'},
      'bg' => $$cfg->{'ui_swr_bg'},
      'fg' => $$cfg->{'ui_swr_fg'},
      'font' => $$cfg->{'ui_swr_font'},
      'text' => $$cfg->{'ui_swr_text'},
      'range_min' => 0,
      'range_max' => 5,
      'thresh_min' => $$cfg->{'thresh_swr_min'},
      'thresh_max' => $$cfg->{'thresh_swr_max'}
   },
   'temp' => {
      'title' => 'Temp',
      'enabled' => TRUE,
      'alarm_bg' => $$cfg->{'ui_temp_alarm_bg'},
      'bg' => $$cfg->{'ui_temp_bg'},
      'fg' => $$cfg->{'ui_temp_fg'},
      'font' => $$cfg->{'ui_temp_font'},
      'text' => $$cfg->{'ui_temp_text'},
      'range_min' => 0,
      'range_max' => 200,
      'thresh_min' => $$cfg->{'thresh_temp_min'},
      'thresh_max' => $$cfg->{'thresh_temp_max'}
   },
   'volt' => {
      'title' => 'Volt',
      'enabled' => TRUE,
      'alarm_bg' => $$cfg->{'ui_volt_alarm_bg'},
      'bg' => $$cfg->{'ui_volt_bg'},
      'fg' => $$cfg->{'ui_volt_fg'},
      'font' => $$cfg->{'ui_volt_font'},
      'text' => $$cfg->{'ui_volt_text'},
      'range_min' => 0,
      'range_max' => 18,
      'thresh_min' => $$cfg->{'thresh_volt_min'},
      'thresh_max' => $$cfg->{'thresh_volt_max'}
   }
};

# Initialize the GTK GUI
$gtk_ui = RustyRigs::GTK_ui->new( $cfg, $log, $vfos );
$gtk_ui->load_icons();
$gtk_ui->draw_main_win();
$gtk_ui->set_icon("connecting");

# open the grid tools dialog
$gridtools = RustyRigs::Gridtools->new();

# and the log viewer
$logview = RustyRigs::Logview->new($cfg);

# Open the log window and redirect log output there
$log->add_handler($logview);

# Load channel memories
$channels = RustyRigs::Memory->new($cfg, $gtk_ui->{'w_main'}, $mem_file);
$channels->load_from_yaml($mem_file);
#$channels->refresh_ui();

# Delay the hamlib init at least a second, for reliability
our $hamlib_initialized = 0;
sub hamlib_init {
    return if $hamlib_initialized;

    $rig_p = RustyRigs::Hamlib->new($cfg);
    $rig = $rig_p->{'rig'};

    if ( defined($rig) ) {
        # change the status from Connecting to Idle.
        $gtk_ui->set_icon("idle");
    }
    else {
        die "setup_hamlib returned undefined?!\n";
    }

    # set up the amplifier, if enabled
    if ($$cfg->{'use_amp'}) {
       $amp_p = RustyRigs::Amp->new();
       $amp = $amp_p->{'amp'};
    }

    # set up the rotator, if enabled
    if ($$cfg->{'use_rotator'}) {
       $rot_p = RustyRigs::Rotator->new();
       $rot = $rot_p->{'rot_p'};
    }

    $hamlib_initialized = 1;
}
Glib::Timeout->add( 1000, \&hamlib_init );

my $w_main = $gtk_ui->{'w_main'};

# Andd.... go!
Gtk3->main();

# say goodbye after main loop ends
$log->Log( "core", "info", "$app_name is shutting down!" );
